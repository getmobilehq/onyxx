const axios = require('axios');

async function generateReport() {
  const assessmentId = 'da5031dc-9e28-490f-82fe-a426a96d7396';
  const apiUrl = 'https://onyx-backend-f7vh.onrender.com/api';
  
  try {
    // First, let's login to get auth token
    console.log('🔐 Logging in...');
    const loginResponse = await axios.post(`${apiUrl}/auth/login`, {
      email: 'admin@onyx.com',
      password: 'password123'
    });
    
    const { accessToken } = loginResponse.data.data.tokens;
    console.log('✅ Login successful');
    
    // Now generate the report
    console.log(`📊 Generating report for assessment ${assessmentId}...`);
    const reportResponse = await axios.post(
      `${apiUrl}/assessments/${assessmentId}/generate-report`,
      {},
      {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json'
        }
      }
    );
    
    console.log('✅ Report generated successfully!');
    console.log('\n📋 REPORT DETAILS:');
    console.log('=====================================\n');
    
    const report = reportResponse.data.data.report;
    
    // Assessment Info
    console.log('🏢 BUILDING INFORMATION:');
    console.log(`   Name: ${report.assessment.building_name}`);
    console.log(`   Type: ${report.assessment.building_type}`);
    console.log(`   Year Built: ${report.assessment.year_built}`);
    console.log(`   Square Footage: ${report.assessment.square_footage?.toLocaleString() || 'N/A'}`);
    console.log(`   Replacement Value: $${parseFloat(report.assessment.replacement_value).toLocaleString()}`);
    
    // FCI Results
    console.log('\n📊 FCI RESULTS:');
    console.log(`   FCI Score: ${report.fci_results.fci_score.toFixed(4)}`);
    console.log(`   Condition Rating: ${report.fci_results.condition_rating}`);
    console.log(`   Total Repair Cost: $${report.fci_results.total_repair_cost.toLocaleString()}`);
    console.log(`   Replacement Cost: $${report.fci_results.replacement_cost.toLocaleString()}`);
    
    // Cost Breakdown
    console.log('\n💰 COST BREAKDOWN:');
    console.log(`   Immediate (0-1 year): $${report.fci_results.immediate_repair_cost.toLocaleString()}`);
    console.log(`   Short-term (1-3 years): $${report.fci_results.short_term_repair_cost.toLocaleString()}`);
    console.log(`   Long-term (3-10 years): $${report.fci_results.long_term_repair_cost.toLocaleString()}`);
    
    // Elements Summary
    console.log('\n🔧 ELEMENTS ASSESSED:');
    if (report.elements && report.elements.length > 0) {
      report.elements.forEach((element, index) => {
        console.log(`   ${index + 1}. ${element.element_name || 'Unknown Element'}`);
        console.log(`      - Condition: ${element.condition_rating}/5`);
        console.log(`      - Repair Cost: $${element.repair_cost?.toLocaleString() || '0'}`);
        if (element.notes) {
          console.log(`      - Notes: ${element.notes}`);
        }
      });
    } else {
      console.log('   No element details available');
    }
    
    // Summary
    console.log('\n📈 SUMMARY:');
    console.log(`   Generated at: ${new Date(report.generated_at).toLocaleString()}`);
    console.log(`   Generated by: ${report.generated_by}`);
    
    // FCI Interpretation
    console.log('\n📊 FCI INTERPRETATION:');
    if (report.fci_results.fci_score <= 0.05) {
      console.log('   ✅ EXCELLENT - Building is in excellent condition');
    } else if (report.fci_results.fci_score <= 0.10) {
      console.log('   ✅ GOOD - Building is in good condition with minor repairs needed');
    } else if (report.fci_results.fci_score <= 0.30) {
      console.log('   ⚠️ FAIR - Building requires moderate repairs and maintenance');
    } else {
      console.log('   ⛔ POOR - Building requires significant repairs or replacement consideration');
    }
    
    console.log('\n=====================================');
    console.log('✅ Report generation complete!');
    
    // Save report to file
    const fs = require('fs');
    const reportFilename = `assessment-report-${assessmentId}.json`;
    fs.writeFileSync(reportFilename, JSON.stringify(report, null, 2));
    console.log(`\n💾 Full report saved to: ${reportFilename}`);
    
  } catch (error) {
    console.error('❌ Error generating report:', error.response?.data || error.message);
    if (error.response?.status === 404) {
      console.error('   Assessment not found or not completed');
    } else if (error.response?.status === 400) {
      console.error('   Assessment may not have any elements assessed');
    }
  }
}

generateReport();