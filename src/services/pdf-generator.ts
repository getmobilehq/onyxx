import jsPDF from 'jspdf';
import 'jspdf-autotable';
import { UserOptions } from 'jspdf-autotable';

declare module 'jspdf' {
  interface jsPDF {
    autoTable: (options: UserOptions) => jsPDF;
  }
}

interface ReportData {
  id: string;
  title: string;
  building_name: string;
  assessor_name: string;
  assessment_date: string;
  report_date: string;
  fci_score: number;
  total_repair_cost: number;
  replacement_value: number;
  immediate_repair_cost: number;
  short_term_repair_cost: number;
  long_term_repair_cost: number;
  element_count: number;
  deficiency_count: number;
  executive_summary: string;
  building_type: string;
  square_footage: number;
  year_built: number;
  city: string;
  state: string;
  systems_data?: {
    elements: Array<{
      individual_element: string;
      condition_rating: number;
      notes: string;
      deficiencies: Array<{
        description: string;
        cost: number;
        category: string;
      }>;
    }>;
  };
  recommendations?: Array<{
    system: string;
    priority: string;
    description: string;
    estimatedCost: number;
    timeline: string;
  }>;
}

export class PDFGenerator {
  private doc: jsPDF;
  private pageHeight: number;
  private pageWidth: number;
  private currentY: number;
  private margin: number;

  constructor() {
    this.doc = new jsPDF();
    this.pageHeight = this.doc.internal.pageSize.height;
    this.pageWidth = this.doc.internal.pageSize.width;
    this.currentY = 20;
    this.margin = 20;
  }

  private addHeader(title: string) {
    // Company logo placeholder
    this.doc.setFillColor(41, 128, 185);
    this.doc.rect(this.margin, 10, 30, 8, 'F');
    this.doc.setTextColor(255, 255, 255);
    this.doc.setFontSize(10);
    this.doc.text('ONYX', this.margin + 2, 16);

    // Title
    this.doc.setTextColor(0, 0, 0);
    this.doc.setFontSize(20);
    this.doc.text(title, this.margin, 35);
    
    this.currentY = 45;
  }

  private addFooter() {
    const pageCount = this.doc.internal.pages.length - 1;
    this.doc.setFontSize(8);
    this.doc.setTextColor(128, 128, 128);
    this.doc.text(
      `Generated by Onyx Assessment Platform - Page ${pageCount}`,
      this.margin,
      this.pageHeight - 10
    );
    this.doc.text(
      new Date().toLocaleDateString(),
      this.pageWidth - this.margin - 30,
      this.pageHeight - 10
    );
  }

  private checkPageBreak(neededHeight: number = 20) {
    if (this.currentY + neededHeight > this.pageHeight - 30) {
      this.doc.addPage();
      this.currentY = 20;
    }
  }

  private addSection(title: string, content: () => void) {
    this.checkPageBreak(30);
    
    // Section title
    this.doc.setFontSize(14);
    this.doc.setTextColor(41, 128, 185);
    this.doc.text(title, this.margin, this.currentY);
    this.currentY += 10;

    // Section divider
    this.doc.setDrawColor(200, 200, 200);
    this.doc.line(this.margin, this.currentY, this.pageWidth - this.margin, this.currentY);
    this.currentY += 8;

    // Section content
    content();
    this.currentY += 5;
  }

  private getFCIStatus(fci: number): { label: string; color: [number, number, number] } {
    if (fci <= 0.1) return { label: 'Excellent', color: [34, 197, 94] };
    if (fci <= 0.4) return { label: 'Good', color: [59, 130, 246] };
    if (fci <= 0.7) return { label: 'Fair', color: [251, 191, 36] };
    return { label: 'Critical', color: [239, 68, 68] };
  }

  private formatCurrency(amount: number): string {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
    }).format(amount);
  }

  generateReport(reportData: ReportData): void {
    // Header
    this.addHeader('Facility Condition Assessment Report');

    // Executive Summary
    this.addSection('Executive Summary', () => {
      this.doc.setFontSize(10);
      this.doc.setTextColor(0, 0, 0);

      // Building info
      const buildingInfo = [
        ['Building Name:', reportData.building_name],
        ['Location:', `${reportData.city}, ${reportData.state}`],
        ['Building Type:', reportData.building_type],
        ['Square Footage:', reportData.square_footage?.toLocaleString() || 'N/A'],
        ['Year Built:', reportData.year_built?.toString() || 'N/A'],
        ['Assessment Date:', new Date(reportData.assessment_date).toLocaleDateString()],
        ['Assessor:', reportData.assessor_name],
      ];

      buildingInfo.forEach(([label, value], index) => {
        this.doc.text(label, this.margin, this.currentY + (index * 6));
        this.doc.text(value, this.margin + 50, this.currentY + (index * 6));
      });

      this.currentY += buildingInfo.length * 6 + 10;

      // Executive summary text
      if (reportData.executive_summary) {
        const lines = this.doc.splitTextToSize(reportData.executive_summary, this.pageWidth - 2 * this.margin);
        this.doc.text(lines, this.margin, this.currentY);
        this.currentY += lines.length * 5 + 5;
      }
    });

    // FCI Summary
    this.addSection('Facility Condition Index (FCI)', () => {
      const fciStatus = this.getFCIStatus(reportData.fci_score);
      
      // FCI Score
      this.doc.setFontSize(12);
      this.doc.text('FCI Score:', this.margin, this.currentY);
      this.doc.setTextColor(...fciStatus.color);
      this.doc.text(`${reportData.fci_score.toFixed(4)} (${fciStatus.label})`, this.margin + 40, this.currentY);
      this.doc.setTextColor(0, 0, 0);
      this.currentY += 10;

      // Cost breakdown
      const costData = [
        ['Total Repair Cost:', this.formatCurrency(reportData.total_repair_cost || 0)],
        ['Replacement Value:', this.formatCurrency(reportData.replacement_value || 0)],
        ['Immediate Repairs:', this.formatCurrency(reportData.immediate_repair_cost || 0)],
        ['Short-term Repairs:', this.formatCurrency(reportData.short_term_repair_cost || 0)],
        ['Long-term Repairs:', this.formatCurrency(reportData.long_term_repair_cost || 0)],
      ];

      costData.forEach(([label, value], index) => {
        this.doc.text(label, this.margin, this.currentY + (index * 6));
        this.doc.text(value, this.margin + 70, this.currentY + (index * 6));
      });

      this.currentY += costData.length * 6;
    });

    // Assessment Summary
    this.addSection('Assessment Summary', () => {
      const summaryData = [
        ['Total Elements Assessed:', reportData.element_count?.toString() || '0'],
        ['Total Deficiencies Found:', reportData.deficiency_count?.toString() || '0'],
        ['Report Generated:', new Date(reportData.report_date).toLocaleDateString()],
      ];

      summaryData.forEach(([label, value], index) => {
        this.doc.text(label, this.margin, this.currentY + (index * 6));
        this.doc.text(value, this.margin + 70, this.currentY + (index * 6));
      });

      this.currentY += summaryData.length * 6;
    });

    // System Conditions Table
    if (reportData.systems_data?.elements?.length) {
      this.addSection('System Conditions', () => {
        const tableData = reportData.systems_data!.elements
          .slice(0, 20) // Limit to prevent too large PDFs
          .map(element => [
            element.individual_element || 'Unknown Element',
            this.getConditionLabel(element.condition_rating),
            element.deficiencies?.length || 0,
            element.notes || 'No notes'
          ]);

        this.doc.autoTable({
          head: [['Element', 'Condition', 'Deficiencies', 'Notes']],
          body: tableData,
          startY: this.currentY,
          theme: 'grid',
          headStyles: { fillColor: [41, 128, 185] },
          margin: { left: this.margin, right: this.margin },
          didDrawPage: () => {
            this.addFooter();
          }
        });

        this.currentY = (this.doc as any).lastAutoTable.finalY + 10;
      });
    }

    // Recommendations
    if (reportData.recommendations?.length) {
      this.addSection('Recommendations', () => {
        reportData.recommendations!.forEach((rec, index) => {
          this.checkPageBreak(25);
          
          this.doc.setFontSize(11);
          this.doc.setTextColor(41, 128, 185);
          this.doc.text(`${index + 1}. ${rec.system}`, this.margin, this.currentY);
          this.currentY += 6;

          this.doc.setFontSize(9);
          this.doc.setTextColor(0, 0, 0);
          this.doc.text(`Priority: ${rec.priority}`, this.margin + 5, this.currentY);
          this.doc.text(`Timeline: ${rec.timeline}`, this.margin + 60, this.currentY);
          this.doc.text(`Cost: ${this.formatCurrency(rec.estimatedCost)}`, this.margin + 120, this.currentY);
          this.currentY += 6;

          const descLines = this.doc.splitTextToSize(rec.description, this.pageWidth - 2 * this.margin - 10);
          this.doc.text(descLines, this.margin + 5, this.currentY);
          this.currentY += descLines.length * 4 + 8;
        });
      });
    }

    // Footer on all pages
    const pageCount = this.doc.internal.pages.length;
    for (let i = 1; i <= pageCount; i++) {
      this.doc.setPage(i);
      this.addFooter();
    }
  }

  private getConditionLabel(rating: number): string {
    if (rating >= 5) return 'Excellent';
    if (rating >= 4) return 'Good';
    if (rating >= 3) return 'Fair';
    if (rating >= 2) return 'Poor';
    return 'Critical';
  }

  download(filename: string): void {
    this.doc.save(filename);
  }

  getBlob(): Blob {
    return this.doc.output('blob');
  }
}

export const generateReportPDF = (reportData: ReportData, filename?: string): void => {
  const generator = new PDFGenerator();
  generator.generateReport(reportData);
  
  const defaultFilename = `facility-assessment-${reportData.building_name?.replace(/\s+/g, '-').toLowerCase()}-${new Date().getFullYear()}.pdf`;
  generator.download(filename || defaultFilename);
};

export const generateReportBlob = (reportData: ReportData): Blob => {
  const generator = new PDFGenerator();
  generator.generateReport(reportData);
  return generator.getBlob();
};